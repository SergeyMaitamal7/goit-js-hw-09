{"mappings":"AACQA,SAASC,cAAc,SAGrBC,iBAAiB,UAE3B,SAAsBC,G,kBAQlB,IAamBC,EAAUC,EACzBC,GADeF,EAXL,CAACG,GAWcF,EAbfG,EAAaC,EAAO,CAACF,GAc/BD,EAAgBI,KAAKC,SAAW,GAE/B,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLT,EACFO,EAAQ,CAAET,WAAUC,UAEpBS,EAAO,CAAEV,WAAUC,S,GAEpBA,E,KApBAW,MAAK,SAAAC,GAAWA,EAARb,S,IAAUC,EAAKY,EAALZ,MACjBa,QAAQC,IAAI,uBAAiCC,OAARb,EAAE,QAAYa,OAANf,EAAM,M,IAEpDgB,OAAM,SAAAJ,GAAWA,EAARb,S,IAAUC,EAAKY,EAALZ,MAClBa,QAAQC,IAAI,sBAAgCC,OAARb,EAAE,QAAYa,OAANf,EAAM,M,KAdxDF,EAAMmB,iBAMN,IAJA,IAAMd,EAAae,OAAOpB,EAAMqB,cAAcnB,MAAMoB,OAC9ChB,EAAOc,OAAOpB,EAAMqB,cAAcf,KAAKgB,OACvCC,EAASH,OAAOpB,EAAMqB,cAAcE,OAAOD,OAExCE,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAACC,EAAAD,GAWnCxB,EAAMqB,cAAcK,O","sources":["src/js/03-promises.js"],"sourcesContent":["const refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', buttonSubmit);\n\nfunction buttonSubmit(event) {\n  event.preventDefault();\n\n  const firstDelay = Number(event.currentTarget.delay.value);\n  const step = Number(event.currentTarget.step.value);\n  const amount = Number(event.currentTarget.amount.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    const delay = firstDelay + step * [i];\n\n    createPromise([i], delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${i} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${i} in ${delay}ms`);\n      });\n  }\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Напиши скрипт, который при сабмите формы вызывает\n// функцию createPromise(position, delay) столько раз,\n// сколько ввели в поле amount. При каждом вызове передай ей номер\n// создаваемого промиса (position) и задержку учитывая введенную пользователем\n// первую задержку (delay) и шаг (step).\n\n// Дополни код функции createPromise так, чтобы она возвращала один промис,\n//  который выполянется или отклоняется через delay времени. Значением промиса\n//  должен быть объект, в котором будут свойства position и delay со значениями\n//  одноименных параметров. Используй начальный код функции для выбора того, что\n//   нужно сделать с промисом - выполнить или отклонить.\n"],"names":["document","querySelector","addEventListener","event","position","delay","shouldResolve","i","firstDelay","step","Math","random","Promise","resolve","reject","setTimeout","then","param","console","log","concat","catch","preventDefault","Number","currentTarget","value","amount","i1","_loop","reset"],"version":3,"file":"03-promises.8ec5a54e.js.map"}